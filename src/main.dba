// GOURCE GUI
// © Copyright 2011 Martin Enderleit
//
// This file is part of GourceGUI.
//
// GourceGUI is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// GourceGUI is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with GourceGUI.  If not, see <http://www.gnu.org/licenses/>.


// Shows debug info if set to 1.
#constant GG_DEBUG     0

// Disable quitting with ESCAPE.
disable escapekey

// UDT to hold coordinates.
type coord_type
    x as integer
    y as integer
endtype

global GG_Path as string
GG_Path = get dir$()

// Global EXIT flag.
global GG_Done as boolean
GG_Done = 0

// String containing the parsed options.
global GG_Options as string
GG_Options = ""

// Strings to hold the various paths.
global GG_GourcePath as string
global GG_VCSPath as string
global GG_LogoPath as string
global GG_BGPath as string

// Positioning of PATH area.
global GPPos as coord_type
global VPPos as coord_type
global LPPos as coord_type
global BPPos as coord_type
GPPos.x = 80
GPPos.y = 50
VPPos.x = GPPos.x
VPPos.y = GPPos.y + 50
LPPos.x = GPPos.x
LPPos.y = VPPos.y + 50
BPPos.x = GPPos.x
BPPos.y = LPPos.y + 50

// Positioning of FLAGS area.
global Flags as coord_type
Flags.x = GPPos.x
Flags.y = BPPos.y + 150

// Initialize the Options.
InitOptions()

// Init program.
sync on : sync rate 0
randomize timer()

cls rgb(239,239,239)
sync

// Start the BBB-GUI plugin.
start bbb gui

// Get handle to the main window. (DBPro window)
global MainWin as integer
MainWin = get dbpro window() : set main window MainWin
window set color MainWin, 239, 239, 239

// Make window for editing speeds/timing...
SpeedWin = make window(desktop width()/2-200,desktop height()/2-150,400,300,"Edit timing...", MainWin, WS_BORDER)
window set color SpeedWin, 239, 239, 239

// Make SpeedWin UI elements...
SW_SPDLabel = make label(65,11,150,20,"--seconds-per-day",SpeedWin)
SW_SecsPerDay = make editbox(10,10,50,20,ES_RIGHT,SpeedWin)
SW_ASSLabel = make label(65,36,150,20,"--auto-skip-seconds",SpeedWin)
SW_AutoSkipSecs = make editbox(10,35,50,20,ES_RIGHT,SpeedWin)
SW_FITLabel = make label(65,61,150,20,"--file-idle-time",SpeedWin)
SW_FileIdleTime = make editbox(10,60,50,20,ES_RIGHT,SpeedWin)

tt = BBB Window_AddTooltip(SW_SPDLabel, 0, "Speed of simulation in seconds per day")
tt = BBB Window_AddTooltip(SW_ASSLabel, 0, "Skip to next entry if nothing happens for a number of seconds")
tt = BBB Window_AddTooltip(SW_FITLabel, 0, "Time in seconds files remain idle before they are removed or 0 for no limit")

SW_CloseButton = make button(400-85,300-55,75,25,"Close",SpeedWin)
hide window SpeedWin

// Make HideWin UI elements...
HideWin = make window(desktop width()/2-125,desktop height()/2-100,250,200,"Hide elements...", MainWin, WS_BORDER)
window set color HideWin, 239, 239, 239

HW_Bloom = make checkbox(10,10,100,20,"Bloom",HideWin)
HW_Date = make checkbox(150,10,100,20,"Date",HideWin)
HW_DirNames = make checkbox(10,30,100,20,"DirNames",HideWin)
HW_Files = make checkbox(150,30,100,20,"Files",HideWin)
HW_FileNames = make checkbox(10,50,100,20,"FileNames",HideWin)
HW_Mouse = make checkbox(150,50,100,20,"Mouse",HideWin)
HW_Progress = make checkbox(10,70,100,20,"Progress",HideWin)
HW_Root = make checkbox(150,70,100,20,"Root",HideWin)
HW_Tree = make checkbox(10,90,100,20,"Tree",HideWin)
HW_Users = make checkbox(150,90,100,20,"Users",HideWin)
HW_UserNames = make checkbox(10,110,100,20,"UserNames",HideWin)

tt = BBB Window_AddTooltip(HW_Bloom, 0, "Hide bloom effect")
tt = BBB Window_AddTooltip(HW_Date, 0, "Hide current date")
tt = BBB Window_AddTooltip(HW_DirNames, 0, "Hide names of directories")
tt = BBB Window_AddTooltip(HW_Files, 0, "Hide file icons")
tt = BBB Window_AddTooltip(HW_FileNames, 0, "Hide names of files")
tt = BBB Window_AddTooltip(HW_Mouse, 0, "Hide mouse cursor")
tt = BBB Window_AddTooltip(HW_Progress, 0, "Hide progress bar widget")
tt = BBB Window_AddTooltip(HW_Root, 0, "Hide root directory of tree")
tt = BBB Window_AddTooltip(HW_Tree, 0, "Hide animated tree structure")
tt = BBB Window_AddTooltip(HW_Users, 0, "Hide user avatars")
tt = BBB Window_AddTooltip(HW_UserNames, 0, "Hide names of users")

HW_CloseButton = make button(250-85,200-55,75,25,"Close",HideWin)
hide window HideWin

// Create the Labels, EditBoxes, and Buttons for the PATH area.
GPLabel = make label(GPPos.x,GPPos.y,500,20,"Gource Executable",MainWin)
GPEditBox = make editbox(GPPos.x,GPPos.y+20,600,20,ES_READONLY,MainWin) : window set text GPEditBox, GG_GourcePath
GPButton = make button(GPPos.x+600,GPPos.y+19,20,20,"...",MainWin)
VPLabel = make label(VPPos.x,VPPos.y,500,20,"VCS Log Path",MainWin)
VPEditBox = make editbox(VPPos.x,VPPos.y+20,600,20,ES_READONLY,MainWin) : window set text VPEditBox, GG_VCSPath
VPButton = make button(VPPos.x+600,VPPos.y+19,20,20,"...",MainWin)
LPLabel = make label(LPPos.x,LPPos.y,500,20,"Logo Image",MainWin)
LPEditBox = make editbox(LPPos.x,LPPos.y+20,600,20,ES_READONLY,MainWin) : window set text LPEditBox, GG_LogoPath
LPButton = make button(LPPos.x+600,LPPos.y+19,20,20,"...",MainWin)
BPLabel = make label(BPPos.x,BPPos.y,500,20,"Background Image",MainWin)
BPEditBox = make editbox(BPPos.x,BPPos.y+20,600,20,ES_READONLY,MainWin) : window set text BPEditBox, GG_BGPath
BPButton = make button(BPPos.x+600,BPPos.y+19,20,20,"...",MainWin)

SpeedButton = make button(BPPos.x, BPPos.y+55, 150,25,"Edit Timing...",MainWin)
HideButton = make button(BPPos.x+200, BPPos.y+55, 150,25,"Hide elements...",MainWin)

bglabel = make label(BPPos.x+23, BPPos.y+97, 150,20, "--background-colour", MainWin)
bgwin = make window(BPPos.x, BPPos.y+95, 20, 20, "BGCOL", MainWin, WS_CHILD)
tt = BBB Window_AddTooltip(bglabel, 0, "Set background color")

fontlabel = make label(BPPos.x+223, BPPos.y+97, 150,20, "--font-colour", MainWin)
fontwin = make window(BPPos.x+200, BPPos.y+95, 20,20, "FONTCOL", MainWin, WS_CHILD)
tt = BBB Window_AddTooltip(fontlabel, 0, "Set font color")

// Bugged command?
// make hsplitter(LPPos.x, LPPos.y+50, 620, 5, MainWin)

// Create the CheckBoxes, and the Label for the FLAGS area.
FlagLabel = make label(Flags.x, Flags.y-20, 100, 20, "FLAGS", MainWin)
cb_multisampling = make checkbox(Flags.x, Flags.y, 150, 20, "--multi-sampling", MainWin)
cb_fullscreen = make checkbox(Flags.x+250, Flags.y, 150, 20, "--fullscreen", MainWin)
cb_loop = make checkbox(Flags.x+500, Flags.y, 150, 20, "--loop", MainWin)
cb_realtime = make checkbox(Flags.x, Flags.y+20, 150, 20, "--realtime", MainWin)
cb_key = make checkbox(Flags.x+250, Flags.y+20, 150, 20, "--key", MainWin)
cb_vsync = make checkbox(Flags.x+500, Flags.y+20, 150, 20, "--no-vsync", MainWin)

tt = BBB Window_AddTooltip(cb_multisampling,0,"Enable MultiSampling")
tt = BBB Window_AddTooltip(cb_fullscreen, 0, "Set fullscreen mode")
tt = BBB Window_AddTooltip(cb_loop, 0, "Loop back to the start of the log when the end is reached")
tt = BBB Window_AddTooltip(cb_realtime, 0, "Realtime playback speed (disables --seconds-per-day & --auto-skip-seconds)")
tt = BBB Window_AddTooltip(cb_key, 0, "Show file extension key")
tt = BBB Window_AddTooltip(cb_vsync, 0, "Disable vsync")

// Create the Gource, and Exit buttons.
GourceButton = make button(650,550,100,30,"Gource!",MainWin)
ExitButton = make button(50,550,100,30,"Exit",MainWin)

if LoadOptions()
    window set text GPEditBox, GG_GourcePath
    window set text VPEditBox, GG_VCSPath
    window set text LPEditBox, GG_LogoPath
    window set text BPEditBox, GG_BGPath
    checkbox set state cb_multisampling, FLAG_MultiSampling
    checkbox set state cb_fullscreen, FLAG_Fullscreen
    checkbox set state cb_loop, FLAG_Loop
    checkbox set state cb_realtime, FLAG_Realtime
    checkbox set state cb_key, FLAG_Key
    checkbox set state cb_vsync, FLAG_NoVSync
    window set color bgwin, rgbr(COLOR_Background), rgbg(COLOR_Background), rgbb(COLOR_Background)
    window set color fontwin, rgbr(COLOR_Font), rgbg(COLOR_Font), rgbb(COLOR_Font)
endif

set focus window MainWin

// Main Loop
repeat
    nice sleep 25
    if button clicked(SpeedButton)
        show window SpeedWin
        set foreground window SpeedWin
        set active window SpeedWin
        disable window MainWin
        window set text SW_SecsPerDay, str$(OPTION_SecsPerDay)
        window set text SW_AutoSkipSecs, str$(OPTION_AutoSkipSecs)
        window set text SW_FileIdleTime, str$(OPTION_FileIdleTime)
        repeat
            nice sleep 25
            OPTION_SecsPerDay = val(window get text(SW_SecsPerDay))
            OPTION_AutoSkipSecs = val(window get text(SW_AutoSkipSecs))
            OPTION_FileIdleTime = val(window get text(SW_FileIdleTime))
        until button clicked(SW_CloseButton)
        //window set text SW_SecsPerDay, str$(OPTION_SecsPerDay)
        //window set text SW_AutoSkipSecs, str$(OPTION_AutoSkipSecs)
        //window set text SW_FileIdleTime, str$(OPTION_FileIdleTime)
        enable window MainWin
        hide window SpeedWin
        set foreground window MainWin
        set active window MainWin
    endif
    if button clicked(HideButton)
        show window HideWin
        set foreground window HideWin
        set active window HideWin
        disable window MainWin
        checkbox set state HW_Bloom, (FLAG_Hide && HIDE_BLOOM)
        checkbox set state HW_Date, ((FLAG_Hide && HIDE_DATE) >> 1)
        checkbox set state HW_DirNames, ((FLAG_Hide && HIDE_DIRNAMES) >> 2)
        checkbox set state HW_Files, ((FLAG_Hide && HIDE_FILES) >> 3)
        checkbox set state HW_FileNames, ((FLAG_Hide && HIDE_FILENAMES) >> 4)
        checkbox set state HW_Mouse, ((FLAG_Hide && HIDE_MOUSE) >> 5)
        checkbox set state HW_Progress, ((FLAG_Hide && HIDE_PROGRESS) >> 6)
        checkbox set state HW_Root, ((FLAG_Hide && HIDE_ROOT) >> 7)
        checkbox set state HW_Tree, ((FLAG_Hide && HIDE_TREE) >> 8)
        checkbox set state HW_Users, ((FLAG_Hide && HIDE_USERS) >> 9)
        checkbox set state HW_UserNames, ((FLAG_Hide && HIDE_USERNAMES) >> 10)
        repeat
            nice sleep 25
            cbs = checkbox get state(HW_Bloom)
            if cbs = 2 then FLAG_Hide = (FLAG_Hide || HIDE_BLOOM)
            if cbs = 3 then FLAG_Hide = (FLAG_Hide && (not HIDE_BLOOM))
            cbs = checkbox get state(HW_Date)
            if cbs = 2 then FLAG_Hide = (FLAG_Hide || HIDE_DATE)
            if cbs = 3 then FLAG_Hide = (FLAG_Hide && (not HIDE_DATE))
            cbs = checkbox get state(HW_DirNames)
            if cbs = 2 then FLAG_Hide = (FLAG_Hide || HIDE_DIRNAMES)
            if cbs = 3 then FLAG_Hide = (FLAG_Hide && (not HIDE_DIRNAMES))
            cbs = checkbox get state(HW_Files)
            if cbs = 2 then FLAG_Hide = (FLAG_Hide || HIDE_FILES)
            if cbs = 3 then FLAG_Hide = (FLAG_Hide && (not HIDE_FILES))
            cbs = checkbox get state(HW_FileNames)
            if cbs = 2 then FLAG_Hide = (FLAG_Hide || HIDE_FILENAMES)
            if cbs = 3 then FLAG_Hide = (FLAG_Hide && (not HIDE_FILENAMES))
            cbs = checkbox get state(HW_Mouse)
            if cbs = 2 then FLAG_Hide = (FLAG_Hide || HIDE_MOUSE)
            if cbs = 3 then FLAG_Hide = (FLAG_Hide && (not HIDE_MOUSE))
            cbs = checkbox get state(HW_Progress)
            if cbs = 2 then FLAG_Hide = (FLAG_Hide || HIDE_PROGRESS)
            if cbs = 3 then FLAG_Hide = (FLAG_Hide && (not HIDE_PROGRESS))
            cbs = checkbox get state(HW_Root)
            if cbs = 2 then FLAG_Hide = (FLAG_Hide || HIDE_ROOT)
            if cbs = 3 then FLAG_Hide = (FLAG_Hide && (not HIDE_ROOT))
            cbs = checkbox get state(HW_Tree)
            if cbs = 2 then FLAG_Hide = (FLAG_Hide || HIDE_TREE)
            if cbs = 3 then FLAG_Hide = (FLAG_Hide && (not HIDE_TREE))
            cbs = checkbox get state(HW_Users)
            if cbs = 2 then FLAG_Hide = (FLAG_Hide || HIDE_USERS)
            if cbs = 3 then FLAG_Hide = (FLAG_Hide && (not HIDE_USERS))
            cbs = checkbox get state(HW_UserNames)
            if cbs = 2 then FLAG_Hide = (FLAG_Hide || HIDE_USERNAMES)
            if cbs = 3 then FLAG_Hide = (FLAG_Hide && (not HIDE_USERNAMES))
        until button clicked(HW_CloseButton)
        enable window MainWin
        hide window HideWin
        set foreground window MainWin
        set active window MainWin
    endif
    if window clicked(bgwin)
        c = make color picker(MainWin)
        r = color picker get r(c)
        g = color picker get g(c)
        b = color picker get b(c)
        COLOR_Background = rgb(r,g,b)
        window set color bgwin, rgbr(COLOR_Background), rgbg(COLOR_Background), rgbb(COLOR_Background)
    endif
    if window clicked(fontwin)
        c = make color picker(MainWin)
        r = color picker get r(c)
        g = color picker get g(c)
        b = color picker get b(c)
        COLOR_Font = rgb(r,g,b)
        window set color fontwin, rgbr(COLOR_Font), rgbg(COLOR_Font), rgbb(COLOR_Font)
    endif
    if button clicked(GPButton)
        GG_GourcePath = BBB OpenFileDialog("Locate gource.exe","Gource|Gource.exe",".exe")
        window set text GPEditBox, GG_GourcePath
    endif
    if button clicked(VPButton)
        f$ = BBB OpenFileDialog("Select folder...","All Files (*.*)|*.*","*.*")
        if f$ <> ""
            REM - Temporary fix for not having access to a folder browser!
            REM - Just select ANY file in the target folder and this
            REM - code will strip the filename from the path. :)
            done = 0
            i = len(f$)
            repeat
                if mid$(f$,i) = "/" or mid$(f$,i) = "\"
                    GG_VCSPath = left$(f$,i)
                    done = 1
                endif
                dec i, 1
            until (done = 1 or i = 0)
        endif
        window set text VPEditBox, GG_VCSPath
    endif
    if button clicked(LPButton)
        GG_LogoPath = BBB OpenFileDialog("Select logo image...","PNG|*.png","*")
        window set text LPEditBox, GG_LogoPath
    endif
    if button clicked(BPButton)
    endif
    
    // Update FLAGS based on CheckBox info.
    cbs = checkbox get state(cb_multisampling)
    if cbs = 2 then FLAG_MultiSampling = 1
    if cbs = 3 then FLAG_MultiSampling = 0
    cbs = checkbox get state(cb_key)
    if cbs = 2 then FLAG_Key = 1
    if cbs = 3 then FLAG_Key = 0
    cbs = checkbox get state(cb_fullscreen)
    if cbs = 2 then FLAG_Fullscreen = 1
    if cbs = 3 then FLAG_Fullscreen = 0
    cbs = checkbox get state(cb_realtime)
    if cbs = 2 then FLAG_Realtime = 1
    if cbs = 3 then FLAG_Realtime = 0
    cbs = checkbox get state(cb_loop)
    if cbs = 2 then FLAG_Loop = 1
    if cbs = 3 then FLAG_Loop = 0
    cbs = checkbox get state(cb_vsync)
    if cbs = 2 then FLAG_NoVSync = 1
    if cbs = 3 then FLAG_NoVSync = 0
    
    // Handle the Exit and Gource! buttons.    
    if button clicked(ExitButton)
        GG_Quit()
    endif
    if button clicked(GourceButton)
        if GG_GourcePath <> "" and GG_VCSPath <> ""
            SaveOptions()
            ParseOptions()
            hide window MainWin
            execute file GG_GourcePath, GG_Options+GG_VCSPath, "", 1
            show window MainWin
        endif
    endif

    GG_MSGLoop()
    
    cls rgb(239,239,239)
    if GG_DEBUG
        ink rgb(0,0,0)
        text 0,0,hex$(FLAG_Hide)
    endif
    sync
until GG_Done = 1

// End the program...
end bbb gui
end

// Message Loop
// Checks for WM_CLOSE message on the main window...
function GG_MSGLoop()
    repeat
        get event
        h = event get handle()
        m = event get message()
        if h = get main window()
            if m = WM_CLOSE
                GG_Quit()
            endif
        endif
    until m = 0
endfunction

function GG_Quit()
    a = BBB MessageBox("Really Quit?","GourceGUI",MB_YESNO)
    if a = IDYES
        SaveOptions()
        GG_Done = 1
    endif
endfunction
